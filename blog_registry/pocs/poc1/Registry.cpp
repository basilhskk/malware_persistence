#include "Registry.h"
#include <stdio.h>


long winapi4humans::Registry::openKey(HKEY hive, LPCWSTR path, REGSAM perms, HKEY* key)
{
	return RegOpenKeyEx(hive, path, 0, perms, key);
};


long winapi4humans::Registry::closeKey(HKEY &key)
{
	return RegCloseKey(key);
};


long winapi4humans::Registry::createKey(HKEY hive, LPCWSTR path)
{
	DWORD dwDisposition; //It verify new key is created or open existing key
	HKEY hKey;
	DWORD status;

	status = RegCreateKeyEx(
		hive,
		path,
		0,
		NULL,
		REG_OPTION_NON_VOLATILE,
		KEY_ALL_ACCESS,
		NULL,
		&hKey,
		&dwDisposition
	);


	Registry::closeKey(hKey);

	return status;
};


long winapi4humans::Registry::deleteKey32(HKEY hive, LPCWSTR path)
{
	return RegDeleteKeyEx(hive, path, KEY_WOW64_32KEY, 0);
}


long winapi4humans::Registry::deleteKey64(HKEY hive, LPCWSTR path)
{
	return RegDeleteKeyEx(hive, path, KEY_WOW64_64KEY, 0);
}


long winapi4humans::Registry::readValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, LPBYTE data, LPDWORD size)
{
	HKEY hKey = nullptr;
	DWORD status;
	status = Registry::openKey(hive, path, KEY_READ, &hKey);

	if (status == ERROR_SUCCESS )
	{
		status = RegQueryValueEx(
			hKey,
			name,
			NULL,
			&type,
			data,
			size
		);

		Registry::closeKey(hKey);
	}

	return status;
}


long winapi4humans::Registry::readValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD32* data)
{
	DWORD size = sizeof(DWORD32);
	return Registry::readValue(hive, path, name, NULL, (LPBYTE)data, &size);
}


long winapi4humans::Registry::readValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD64* data)
{
	DWORD size = sizeof(DWORD64);
	return Registry::readValue(hive, path, name, NULL, (LPBYTE)data, &size);
}


long winapi4humans::Registry::readValue(HKEY hive, LPCWSTR path, LPCWSTR name, LPCSTR* data, LPDWORD size)
{
	*data = (LPCSTR)malloc(sizeof(WCHAR));
	*size = 0;
	long result = Registry::readValue(hive, path, name, NULL, (LPBYTE)*data, size);

	if (result == ERROR_MORE_DATA)
	{
		*data = (LPCSTR)malloc((*size) * sizeof(WCHAR) + sizeof(WCHAR));
		result = Registry::readValue(hive, path, name, NULL, (LPBYTE)*data, size);
	}

	return result;
}


long winapi4humans::Registry::readValue(HKEY hive, LPCWSTR path, LPCWSTR name, LPCWSTR* data, LPDWORD size)
{
	*data = (LPCWSTR)malloc(sizeof(WCHAR));
	*size = 0;
	long result = Registry::readValue(hive, path, name, NULL, (LPBYTE)*data, size);
	
	if (result == ERROR_MORE_DATA)
	{
		*data = (LPCWSTR)malloc((*size)* sizeof(WCHAR)+ sizeof(WCHAR));
		result = Registry::readValue(hive, path, name, NULL, (LPBYTE)*data, size);
	}
	
	return result;
}


long winapi4humans::Registry::readValue(HKEY hive, LPCWSTR path, LPCWSTR name, LPBYTE* data, LPDWORD size)
{
	*data = (LPBYTE)malloc(sizeof(BYTE));
	*size = 0;

	long result = Registry::readValue(hive, path, name, NULL, *data, size);

	if (result == ERROR_MORE_DATA)
	{
		*data = (LPBYTE)malloc((*size) * sizeof(BYTE)+ sizeof(WCHAR));
		result = Registry::readValue(hive, path, name, NULL, *data, size);
	}

	return result;
}


long winapi4humans::Registry::writeValueW(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, LPBYTE data, LPDWORD size)
{
	HKEY hKey = nullptr;
	DWORD status;
	status = winapi4humans::Registry::openKey(hive, path, KEY_SET_VALUE, &hKey);

	if (status == ERROR_SUCCESS)
	{
		status = RegSetValueEx(
			hKey,
			name,
			NULL,
			type,
			data,
			*size
		);

		winapi4humans::Registry::closeKey(hKey);
	}

	return status;
}


long winapi4humans::Registry::writeValueA(HKEY hive, LPCWSTR path, LPCSTR name, DWORD type, LPBYTE data, LPDWORD size)
{
	HKEY hKey = nullptr;
	DWORD status;
	status = winapi4humans::Registry::openKey(hive, path, KEY_SET_VALUE, &hKey);

	if (status == ERROR_SUCCESS)
	{
		status = RegSetValueExA(
			hKey,
			name,
			NULL,
			type,
			data,
			*size
		);

		winapi4humans::Registry::closeKey(hKey);
	}

	return status;
}


long winapi4humans::Registry::writeValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, DWORD32 data) 
{
	DWORD size = sizeof(DWORD32);
	return winapi4humans::Registry::writeValueW(hive, path, name, type, (LPBYTE)&data, &size);
}


long winapi4humans::Registry::writeValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, DWORD64 data)
{
	DWORD size = sizeof(DWORD64);
	return winapi4humans::Registry::writeValueW(hive, path, name, type, (LPBYTE)&data, &size);
}


long winapi4humans::Registry::writeValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, LPCWSTR data, DWORD size)
{
	return winapi4humans::Registry::writeValueW(hive, path, name, type, (LPBYTE)data, &size);
}


long winapi4humans::Registry::writeValue(HKEY hive, LPCWSTR path, LPCSTR name, DWORD type, LPCSTR data, DWORD size)
{
	return winapi4humans::Registry::writeValueA(hive, path, name, type, (LPBYTE)data, &size);
}


long winapi4humans::Registry::writeValue(HKEY hive, LPCWSTR path, LPCWSTR name, LPBYTE data, DWORD size)
{
	return winapi4humans::Registry::writeValueW(hive, path, name, REG_BINARY, (LPBYTE)data, &size);
}


long winapi4humans::Registry::writeKeyValueA(HKEY hive, LPCWSTR path, LPCSTR name, DWORD type, LPBYTE data, LPDWORD size)
{
	HKEY hKey = nullptr;
	DWORD status;
	status = winapi4humans::Registry::openKey(hive, path, KEY_WRITE, &hKey);

	if (status == ERROR_SUCCESS)
	{
		status = RegSetKeyValueA(
			hKey,
			name,
			NULL,
			type,
			data,
			*size
		);
		winapi4humans::Registry::closeKey(hKey);
	}

	return status;
}


long winapi4humans::Registry::writeKeyValueW(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, LPBYTE data, LPDWORD size)
{
	HKEY hKey = nullptr;
	DWORD status;
	status = winapi4humans::Registry::openKey(hive, path, KEY_WRITE, &hKey);

	if (status == ERROR_SUCCESS)
	{
		status = RegSetKeyValueW(
			hKey,
			name,
			NULL,
			type,
			data,
			*size
		);
		winapi4humans::Registry::closeKey(hKey);
	}

	return status;
}


long winapi4humans::Registry::writeKeyValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, DWORD32 data)
{
	DWORD size = sizeof(DWORD32);
	return winapi4humans::Registry::writeKeyValueW(hive, path, name, type, (LPBYTE)&data, &size);
}


long winapi4humans::Registry::writeKeyValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, DWORD64 data)
{
	DWORD size = sizeof(DWORD64);
	return winapi4humans::Registry::writeKeyValueW(hive, path, name, type, (LPBYTE)&data, &size);
}


long winapi4humans::Registry::writeKeyValue(HKEY hive, LPCWSTR path, LPCWSTR name, DWORD type, LPCWSTR data, DWORD size)
{
	return winapi4humans::Registry::writeKeyValueW(hive, path, name, type, (LPBYTE)data, &size);
}


long winapi4humans::Registry::writeKeyValue(HKEY hive, LPCWSTR path, LPCSTR name, DWORD type, LPCSTR data, DWORD size)
{
	return winapi4humans::Registry::writeKeyValueA(hive, path, name, type, (LPBYTE)data, &size);
}


long winapi4humans::Registry::writeKeyValue(HKEY hive, LPCWSTR path, LPCWSTR name, LPBYTE data, DWORD size)
{
	return winapi4humans::Registry::writeKeyValueW(hive, path, name, REG_BINARY, (LPBYTE)data, &size);
}


